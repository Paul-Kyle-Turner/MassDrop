'''
Paul Turner
'''

'''

This is a attempt to create a forest of trees of api calls that can the be visualized.
    The corpus for this is pruned to be the minimum and a visualization of n grams
    and api calls that determine malware can be created.

    
'''


"""
Strip function for the data that comes in such that it is only the subsection of the call the the time.
"""
def strip_to_sub():
    pass


class Node:

    '''
    Constructor
    :param
        call_signifier - string : name of the api call
        parent - Node : some node that predates this one.
        children - List of Node: list of children nodes
    '''
    def __int__(self, call_signifier, parent_node=None, children=None, in_corpus=False):
        self.call_signifier = call_signifier
        self.parent_node = parent_node
        self.children = children if (children is not None) else []
        self.in_corpus = in_corpus
        self.details = dict()


class MalNode(Node):

    '''

    '''
    def __int__(self, call_signifier, parent_node=None, children=None, in_corpus=False, percent_positive):
        super(MalNode, self).__int__(call_signifier, parent_node, children, in_corpus)




class MalTree:

    '''
    Constructor
    :param
        root - Node : the root node of the tree
    '''

    '''
    Search By Condition
    '''


class MalForest:

    '''
    Constructor
    :param
        trees = List of trees : a list of trees that together make up a corpus of api calls in grams
    '''






